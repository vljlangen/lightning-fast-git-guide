[["index.html", "Lightning Fast Git Guide 1 Introduction", " Lightning Fast Git Guide Ville Langén 29.03.2023 1 Introduction In this guide, you will learn how to start using Git. The setup takes about 5 minutes. In the next chapter, I will tell what Git is. If you’ve had enough of chit-chat already, you may skip that chapter. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["what-is-git.html", "2 What is Git?", " 2 What is Git? Git is a version control system - think of it like a time machine of your project. If something goes wrong with your current version, you can go back in time to a previous version that worked. Git is especially useful when you are collaborating with other co-writers. You don’t have to ping-pong your documents via e-mail. Cloud services like Dropbox are awesome, but with Git, you get a more powerful version controlling feature (i.e., the “time machine”). You can build a whole research compendum and push it with Git to a repository. A research compendum is basically like a collection of folders consisting of all intellectual content of your research project, e.g. codes for the statistical analyses, manuscripts, figures and so forth. By the way, you might be asking yourself, whether I have pushed this very guide, too, to a remote repository with Git? Well, I think you know the answer already. In the next chapter, I’ll tell what you have to do to use Git on your computer. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["how-to-start.html", "3 How to start?", " 3 How to start? In order to use Git, you have to do the following things: Have Git on your computer. If you have a Mac, you already have it. But it is easy to install it to Windows, too. Tell Git your name and your email address. Obtain the SSH URL (think of it like the address) of your remote repository, which can be in e.g. GitLab or GitHub. In this example, I will show the workflow for GitLab for UTU, which is a code repository for University of Turku. Create an SSH key. This key enables you to transfer push and pull content between the remote repository and your computer. Tell your SSH key to the remote repository (here: GitLab for UTU). That’s all there is to it. Let’s get started. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["installing-git.html", "4 Installing Git 4.1 On Mac 4.2 On Windows", " 4 Installing Git 4.1 On Mac You don’t have to install anything. Move on to next chapter. 4.2 On Windows Go to the following webpage and download Git for Windows: https://git-scm.com/ If and when you are new to Git, I suggest that you run the installer with default settings, i.e. don’t change any of the click buttons of the installer. The installer installs, among other things: Git Git Bash - a command prompt that resembles a UNIX shell In the next chapter, we will tell Git your name and email address. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["tell-git-your-credentials.html", "5 Tell Git your credentials 5.1 On Mac 5.2 On Windows", " 5 Tell Git your credentials 5.1 On Mac Press Command (or Cmd) button and spacebar button simultaneously A Spotlight Search pops up Write: terminal You don’t usually have to write more than a couple of letters, and already then your computer suggests the application Terminal, and you can just press enter to make it launch Terminal launches. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; Don’t close the Terminal just yet - we’ll need it for one thing in a minute. Press Command + H, which hides the Terminal for now. 5.2 On Windows Press the Windows Key + R on your keyboard Type CMD and press enter Type git-bash.exe If this does not work, do the following: Press the Windows Key + R on your keyboard Type Git Bash and press enter A Unix-kind of shell should launch. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; Don’t close the Git Bash just yet - we’ll need it for one thing in a minute. Click on the minus-looking symbol on the upper right corner of the Git Bash window, that will hide the window for now. In the next chapter, we will tell Git your name and email address. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["log-in-to-gitlab.html", "6 Log in to GitLab 6.1 UTU users 6.2 Non-UTU users", " 6 Log in to GitLab 6.1 UTU users Go to the following webpage: https://gitlab.utu.fi/users/sign_in Type in your UTU user name and password, and boom, you’re in GitLab for UTU - the code repository for University of Turku. 6.2 Non-UTU users If you are not a UTU user, you can still follow this guide, but you will have to have a user account at the “general” GitLab. You can sign up for free at the following webpage under the Get free trial button (as of writing this guide, there is no need to add credit card details): https://about.gitlab.com/ In the next chapter, we will navigate the GitLab and find the field where you have to paste your SSH key. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["navigating-gitlab.html", "7 Navigating GitLab 7.1 Dashboard 7.2 SSH key setting", " 7 Navigating GitLab You should now be logged in to GitLab. 7.1 Dashboard In the opening screen, you will see your projects - either the ones you have created or to which you have been invited. If you don’t have any projects yet, don’t worry. The opening screen will look something like this: 7.2 SSH key setting We will now have to give GitLab your SSH key in order to push or pull projects between your computer and GitLab. Click on your avatar on the upper right corner of webpage and select Preferences: Then, click on SSH Keys: You will see a text box where you should paste your SSH key, which you probably don’t have yet, but don’t worry about it, it is easy to create one. The webpage will look something like this: Do not input anything yet. You can leave the webpage as it is. On Mac, you would want to press Command + H, which hides your internet browser. (On Windows, you may just click the minus-looking sign on the right corner of your web browser window.) In the next chapter, we will create an SSH key. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["create-an-ssh-key.html", "8 Create an SSH key 8.1 On Mac 8.2 On Windows", " 8 Create an SSH key 8.1 On Mac Open up the Terminal again. You can click on its icon on the dock (the “ribbon” that is in the bottom of your screen), or hold down Command and simultaneously press Tab until the Terminal is highlighted. You’re suddenly back in Terminal. Now, type the following command: ssh-keygen The Terminal will read something like this: Generating public/private rsa key pair. Enter file in which to save the key (/Users/YOU CAN SEE YOUR COMPUTER USER NAME HERE/.ssh/id_rsa): It suggests you that file name and file location, and you can confirm that. Next, it will ask whether you want to set a password - in this example, the data traffic will be between you and the code repository of University of Turku, and as such, I would not set any password here: Enter passphrase (empty for no passphrase): After that, the Terminal will display where the SSH key has been saved: Now you can type in cat /Users/YOUR COMPUTER USER NAME HERE/.ssh/id_rsa.pub and press enter. You will see your whole SSH key displayed in the Terminal window. Select it with your mouse and press Command + C - this will copy the SSH key to your computer’s clipboard. Pay attention to select the whole key, starting already from the words ssh-rsa all the way to the end, including even your computer type (in this example: -MBP). In other words, select the whole block that you can see surrounded by the blue box here below: 8.2 On Windows The process is very similar to what you saw above on the Mac section. Just use the Git Bash for these commands. Your relevant code might look something like this: cat /c/Users/YOUR COMPUTER USER NAME HERE/.ssh/id_rsa.pub Adjust the code to your needs. If you can’t get it work, there are good tutorials for getting Git to run and creating the SSH key on YouTube. You may e.g. type in the YouTube search field: Setup Git and SSH for GitLab on Windows and you’ll find good tutorials and get these things to work, eventually. In the next chapter, we will paste your SSH key to GitLab’s respective SSH key field. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["ssh-key-to-gitlab.html", "9 SSH key to GitLab", " 9 SSH key to GitLab Open up your web browser once again. If you didn’t leave the GitLab page, you should still see SSH key field, where you can now paste your SSH key from your clipboard: You should be all set now. In the next chapter, we will clone your GitLab project to your computer with RStudio. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["existing_repository.html", "10 Cloning a repository 10.1 Definition 10.2 Existing repository 10.3 Clone to RStudio 10.4 New repository", " 10 Cloning a repository 10.1 Definition I will demonstrate how you can clone a repository using RStudio. Cloning copies your entire GitLab project, with all files, subfolders and even version history, to your computer. Cloning is a bit like pulling (you will learn this term later), but here we pull the entire repository to your computer at once, not just the changes other people have made to your project. Actually, it doesn’t even matter, if you will process your content subsequently with RStudio or R at all. RStudio can just be used as a cloning/pushing/pulling workstation of your GitLab project. You don’t have to know the R programming language at all. You don’t really have to have any knowledge on the RStudio software either. However, if you are interested in these matters, you may want to look at a separate guide I have written on that topic: https://vldesign.kapsi.fi/r-guide-in-english/ (in English) https://vldesign.kapsi.fi/r/ (in Finnish) 10.2 Existing repository If you have already been invited to collaborate on a project in GitLab, the workflow goes as follows: Click on the upper left corner, where you see an icon resembling a fox That will take you back to your dashboard Click on a project where you have been invited Next, click on: Clone, and subsequently, on Copy URL under the Clone with SSH See the image below for details on where to click: 10.3 Clone to RStudio Launch RStudio. Click File –&gt; New Project –&gt; Version Control –&gt; Git Press Command + V, this will paste the SSH URL: Thereafter, press Tab. The screen will look something like here: Now, change the folder to whatever you like. It could be, e.g., /Users/YOUR COMPUTER USER NAME HERE/rprojects Note that RStudio will automatically make a subfolder with the displayed project directory name. And boom, there you have it. You have just cloned the remote repo from GitLab to your computer. 10.4 New repository If you haven’t been invited yet to any GitLab projects, you can make your own repository right away. You can delete if afterwards, if you want. The workflow goes as follows: Click on the upper left corner, where you see an icon resembling a fox That will take you back to your dashboard Click on New project Next, click on “Create blank project”. Next, you will see the following screen. Give your project a name, keep it private this time, you may create a README.md file automatically and finally, click on Create project: You can now proceed as if you had been invited to a GitLab project, please see the instructions above If you can’t make it work, try inserting the HTTPS URL from the GitLab to RStudio: In the next chapter, we will practice pushing to a remote repo (here: to GitLab). Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["pushing-to-gitlab.html", "11 Pushing to GitLab 11.1 Definition 11.2 Pushing with RStudio", " 11 Pushing to GitLab 11.1 Definition Pushing means that you upload your version of your project to the remote repository (here: to GitLab). 11.2 Pushing with RStudio In RStudio, do the following things: Create a new text file Write some text on it Save it Commit it to the repository This means “staging it”, which is a thing you have to do before pushing You also write a little message, at this time, to what you are committing/pushing Push it to GitLab All of these steps are depicted below: In the next chapter, we will practice how to pull files from a remote repo (here: from GitLab). Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["pulling-from-gitlab.html", "12 Pulling from GitLab 12.1 Definition 12.2 Pulling with RStudio", " 12 Pulling from GitLab 12.1 Definition Pulling is a bit like the opposite of pushing. When you pull, you download the changes that your coworkers have done and pushed to the remote repository (here: GitLab). The changes are merged with your local project files. 12.2 Pulling with RStudio Pulling is even easier than pushing in RStudio. Let’s pretend for a few minutes that you are one of your coworkers and you have created some new content and pushed it to GitLab. Alternatively, this coworker might be creating the content straight in the remote repository (here: in GitLab) via the web browser, without any pushing. To simulate this, in GitLab, do the following things: Go back to your project Click the + symbol Click New file Write some stuff (anything) Give your file a name Click on Commit changes All of these steps are depicted below: Now, you are back to being you and you want to pull the changes made in the remote repository to your computer. Back in RStudio, just click on Pull. And boom, the file is on your computer. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["epilogue.html", "13 Epilogue", " 13 Epilogue This concludes this little guide to using Git with RStudio. There are tons of material online on this topic, but the basic usage is really this simple. Lightning Fast Git Guide by Ville Langén is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
